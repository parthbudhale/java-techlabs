package com.aurionpro.Test;

import java.util.Scanner;
import com.aurionpro.Model.BankAccount;
import com.aurionpro.Model.InsufficientFundsException;

public class ATMTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String accountNumber;
        while (true) {
            System.out.print("Enter your 8-digit account number: ");
            accountNumber = scanner.nextLine();
            if (accountNumber.matches("\\d{8}")) { // Ensures exactly 8 digits
                break;
            } else {
                System.out.println("Invalid account number. It must be exactly 8 digits.");
            }
        }

        double initialBalance = 0;
        while (true) {
            System.out.print("Enter initial balance: ");
            if (scanner.hasNextDouble()) {
                initialBalance = scanner.nextDouble();
                scanner.nextLine(); // Consume newline
                if (initialBalance < 0) {
                    System.out.println("Initial balance cannot be negative. Try again.");
                } else {
                    break;
                }
            } else {
                System.out.println("Invalid amount. Please enter a valid number.");
                scanner.next(); // Consume invalid input
            }
        }

        BankAccount userAccount = new BankAccount(accountNumber, initialBalance);
        System.out.println("Account created successfully!");

        while (true) {
            System.out.println("\nATM Menu:");
            System.out.println("1. Deposit");
            System.out.println("2. Withdraw");
            System.out.println("3. Check Balance");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");

            if (!scanner.hasNextInt()) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.next(); // Consume invalid input
                continue;
            }

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            try {
                switch (choice) {
                    case 1:
                        System.out.print("Enter deposit amount: ");
                        if (!scanner.hasNextDouble()) {
                            System.out.println("Invalid amount.");
                            scanner.next();
                            continue;
                        }
                        double depositAmount = scanner.nextDouble();
                        scanner.nextLine();
                        userAccount.deposit(depositAmount);
                        break;
                    case 2:
                        System.out.print("Enter withdrawal amount: ");
                        if (!scanner.hasNextDouble()) {
                            System.out.println("Invalid amount.");
                            scanner.next();
                            continue;
                        }
                        double withdrawAmount = scanner.nextDouble();
                        scanner.nextLine();
                        userAccount.withdraw(withdrawAmount);
                        break;
                    case 3:
                        userAccount.checkBalance();
                        break;
                    case 4:
                        System.out.println("Exiting...");
                        scanner.close();
                        return;
                    default:
                        System.out.println("Invalid choice. Try again.");
                }
            } catch (InsufficientFundsException e) {
                System.out.println(e.getMessage());
            }
        }
    }
}

